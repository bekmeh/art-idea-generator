{"version":3,"sources":["components/ChosenWord.js","components/ChosenWords.js","components/ChangeNumWordsButton.js","components/ChooseRandomWordsButton.js","components/IdeaWord.js","components/Category.js","data/wordsData.js","App.js","reportWebVitals.js","index.js"],"names":["ChosenWord","this","props","word","index","draggableId","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","id","className","isDragging","Component","ChosenWords","selectedWords","droppableId","direction","droppableProps","length","map","selectedWord","placeholder","ChangeNumWordsButton","diff","label","ChooseRandomWordsButton","numWords","IdeaWord","selected","onClick","Category","category","words","onClickWord","includes","wordsData","App","state","newSelectedWords","filter","setState","Array","from","push","onDragEnd","result","destination","source","splice","draggedWord","Object","keys","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.521c5e5a.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport { Draggable } from 'react-beautiful-dnd';\n\nclass ChosenWord extends Component {\n\n  render() {\n    const { word, index } = this.props;\n\n    return (\n      <Draggable draggableId={word} index={index}>\n        {(provided, snapshot) => (\n          <div {...provided.draggableProps}\n               {...provided.dragHandleProps}\n               ref={provided.innerRef}\n          >\n            <span id={word}\n                  className={`inline-block\n                              cursor-move\n                              select-none\n                              py-1 px-2 mx-2 rounded\n                              text-2xl font-medium tracking-widest transition-none\n                              ${ snapshot.isDragging? 'bg-indigo-300 text-indigo-800' : 'bg-indigo-50 text-indigo-500'}`}>\n              { word }\n            </span>\n          </div>\n        )}\n      </Draggable>\n    );\n  }\n}\n\nexport default ChosenWord;\n","import React, { Component } from 'react';\nimport { Droppable } from 'react-beautiful-dnd';\nimport ChosenWord from './ChosenWord';\n\nclass ChosenWords extends Component {\n  \n  render() {\n    const { selectedWords } = this.props;\n\n    return (\n      <Droppable droppableId=\"chosen-words-droppable\" direction=\"horizontal\">\n        { (provided) => (\n          <div ref={provided.innerRef}\n               {...provided.droppableProps}\n               className=\"flex flex-row justify-center sm:text-3xl text-2xl font-medium text-center title-font text-gray-900 mb-4 h-10\"\n          >\n            {\n              selectedWords.length === 0\n                ? <p className=\"text-base leading-relaxed text-gray-400 pt-4\">Please choose some words</p>\n                : null\n            }\n            {\n              selectedWords.map((selectedWord, index) => {\n                return <ChosenWord key={`chosen=${selectedWord}`} index={index} word={selectedWord}/>\n              })\n            }\n            {provided.placeholder}\n          </div>\n        )}\n      </Droppable>\n    )\n  }\n}\n\nexport default ChosenWords;\n","\nimport React, { Component } from 'react';\n\nclass ChangeNumWordsButton extends Component {\n\n  render() {\n    const { diff } = this.props;\n\n    var label = \"\";\n\n    if (diff === \"1\"){\n      label = \"+\";\n    } else if (diff === \"-1\") {\n      label = \"-\";\n    }\n\n    return (\n      <button className=\"flex mx-auto mt-16 mr-2 \n                     text-white bg-indigo-200\n                     border-0 py-2 px-4\n                     focus:outline-none hover:bg-indigo-400\n                     rounded text-xs\n                     inline-flex items-center justify-center\">\n         { label }\n      </button>\n    );\n  }\n}\n\nexport default ChangeNumWordsButton;\n","\nimport React, { Component } from 'react';\n\nclass ChooseRandomWordsButton extends Component {\n\n  render() {\n    const { numWords } = this.props;\n\n    return (\n      <button className=\"flex mx-auto mt-16 mr-2\n                     text-white bg-indigo-500\n                     border-0 py-2 px-8\n                     focus:outline-none hover:bg-indigo-600\n                     rounded text-m\n                     inline-flex items-center justify-center\">\n        Choose { numWords } Random Words\n      </button>\n    );\n  }\n}\n\nexport default ChooseRandomWordsButton;\n","import React, { Component } from 'react';\n\nclass IdeaWord extends Component {\n\n  render() {\n    const { word, selected } = this.props;\n\n    return (\n      <span className={`inline-block \n                       py-1 px-2 m-2 rounded\n                       cursor-pointer\n                       select-none\n                       ${selected ? \"bg-indigo-200 text-indigo-800 hover:bg-indigo-300 hover:black\" : \"bg-indigo-50 text-indigo-500 hover:bg-indigo-200 hover:text-indigo-800\"} \n                       text-m font-medium tracking-widest}`} onClick={() => this.props.onClick(word)}>\n        { word }\n      </span> \n    );\n  }\n}\n\nexport default IdeaWord;\n","import React, { Component } from 'react';\nimport IdeaWord from './IdeaWord';\n\nclass Category extends Component {\n  \n  render() {\n    const { category, words } = this.props;\n\n    return (\n      <div className=\"p-8 lg:w-1/4 sm:w-1/2 w-full\">\n        <h2 className=\"font-medium title-font tracking-widest text-gray-900 m-2 text-sm text-center sm:text-left uppercase\">\n          { category }\n        </h2>\n        <div className=\"flex flex-col sm:items-start sm:text-left text-center items-center -mb-1\">\n          {\n            words.map((word) => {\n              return <IdeaWord key={`word-${word}`} word={word} onClick={this.props.onClickWord} selected={this.props.selectedWords.includes(word)}/>\n            })\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Category;\n","export const wordsData = {\n  \"space\": [ \"jupiter\", \"moon\"],\n  \"animals\": [ \"red panda\", \"tiger\" ]\n};\n","import React, { Component } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport ChosenWords from './components/ChosenWords';\nimport ChangeNumWordsButton from './components/ChangeNumWordsButton';\nimport ChooseRandomWordsButton from './components/ChooseRandomWordsButton';\nimport Category from './components/Category';\nimport {wordsData} from './data/wordsData.js';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { selectedWords: [], draggedWord: null };\n  }\n\n  onClickWord = (word) => {\n    if (this.state.selectedWords.includes(word)) {\n      // remove word\n      const newSelectedWords = this.state.selectedWords.filter((selectedWord) => selectedWord !== word);\n      this.setState({ selectedWords: newSelectedWords });\n    } else {\n      // add word\n      var newSelectedWords = Array.from(this.state.selectedWords);\n      newSelectedWords.push(word);\n      this.setState({ selectedWords: newSelectedWords });\n    }\n  }\n\n  onDragEnd = (result) => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (destination.index === source.index) {\n      // no change\n      return;\n    }\n\n    const newSelectedWords = Array.from(this.state.selectedWords);\n    // remove 1 at source index\n    newSelectedWords.splice(source.index, 1)\n    // add dragged word at destination index\n    newSelectedWords.splice(destination.index, 0, draggableId)\n\n    this.setState({ selectedWords: newSelectedWords });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"h-full bg-indigo-100 p-8\">\n          <h1 className=\"text-indigo-900 title-font text-2xl\">Art Idea Generator</h1>\n        </div>\n        <section className=\"text-gray-600 body-font\">\n          <div className=\"container px-40 py-24 mx-auto\">\n            <div className=\"text-center mb-10\">\n              <DragDropContext onDragEnd={this.onDragEnd} >\n                <ChosenWords selectedWords={this.state.selectedWords} />\n              </DragDropContext>\n              <ChangeNumWordsButton diff=\"-1\"/>\n              <ChooseRandomWordsButton numWords=\"3\"/>\n              <ChangeNumWordsButton diff=\"1\"/>\n            </div>\n            <div className=\"text-center\">\n              <p className=\"text-base leading-relaxed xl:w-2/4 lg:w-3/4 mx-auto\">\n                Choose the number of words you'd like above, and press the button to randomly choose.\n                You can also manually choose any number of words and rearrange them.\n              </p>\n            </div>\n            <div className=\"container flex flex-wrap m-4 mx-auto text-center items-center justify-center\">\n              { \n                Object.keys(wordsData).map((category) => {\n                  return <Category key={`category-${category}`} category={category} words={wordsData[category]} onClickWord={this.onClickWord} selectedWords={this.state.selectedWords}/>\n                }) \n              }\n            </div>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}